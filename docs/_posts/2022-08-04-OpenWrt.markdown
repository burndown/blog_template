---
layout: post
title:  "OpenWrt 编译!"
date:   2022-08-04 08:10:40 +0000
categories: openwrt
---

# OpenWrt X64 编译

[toc]



本文介绍两种OpenWrt固件编译的方式，分别是本地 Ubuntu VM 编译和 Github Action 编译。

本文以 Lean 和 Kenzok8 的库为基础进行编译，编译过程选择了一些自己常用软件包，并加了一些自己的配置文件。本地编译流程按照 Lean 的[说明](https://github.com/coolsnowwolf/lede)，Github Action 编译按照 [P3TERX](https://p3terx.com/archives/build-openwrt-with-github-actions.html) 的说明。

两种方式没有本质的区别，区别在于，一个是本地编译，需要一台 Ubuntu 电脑或者 VM 和良好的网络。一个是在 Github 编译，需要 Github 账号。

## 准备

### OpenWrt 库

下边三个库里包含了我们需要的软件包。Lean 的库提供里 OpenWrt 的源码，Kenzok8 和 Small 提供了很多额外的软件，比如 DDNS, Passwall 等。



> Lean: https://github.com/coolsnowwolf/lede
>
> Kenzok8: https://github.com/kenzok8/openwrt-packages
>
> small: https://github.com/kenzok8/small



这三个库是放在 feed.conf.default 里的。建议先从 Github Clone Lean的库，然后把Kenzok8 和 Small 加进去。 feed.conf.default 完整文件如下：

```shell
heigao@heigao-S:~/lede$ cat feeds.conf.default

src-git packages https://github.com/coolsnowwolf/packages
src-git luci https://github.com/coolsnowwolf/luci
src-git routing https://github.com/coolsnowwolf/routing
src-git telephony https://git.openwrt.org/feed/telephony.git
src-git kenzo https://github.com/kenzok8/openwrt-packages
src-git small https://github.com/kenzok8/small

```

## 软件包

我的软件包：

- luci-app-aliddns
- luci-app-aliyundrive-webdav
- luci-app-accesscontrol
- luci-app-aliddns
- luci-app-passwall
- luci-app-udpxy
- luci-app-upnp
- luci-app-wireguard

记得添加IPv6 支持

- ipv6helper

## 编译

### 本地Ubuntu 模式

跟着 Lean OpenWrt 库里的[说明](https://github.com/coolsnowwolf/lede)操作就好。

注意事项：

+ 如果后续还有可能编译，记得给 Ubuntu VM 划分的磁盘大点，不然编译几次就没空间了 
+ 准备好科学环境，不然从 Github 上拉取源码会比较费劲
+ 拉取 Lean 的 代码后，记得在 feed.conf.default 里添加 Kenzo 和 Small 的库
+ 选择镜像的格式，根据自己的情况选择: leagcy or EFI 
+ Luci 有默认选项，包含了很多APP，可以根据个人喜欢勾掉，自己手动选择
+ ssrplus 可能和 Passwall 有冲突，选择一个即可
+ 可以在lede 文件夹下创建 files，把自己想预加载的配置文件放进去，但是我这次没有尝试

漫长的等待后，就可以去 ~/lede/bin/targets/x86/64 下看到编译好的固件了。

![image-20220804161745057](assets/image-20220804161745057.png)

### Github 编译模式

编译过程按照 P3TERX 的[说明](https://p3terx.com/archives/build-openwrt-with-github-actions.html)

简明步骤如下：

1. 以 P3TERX [Action-OpenWrt](https://github.com/P3TERX/Actions-OpenWrt) 为模板创建一个自己的 Action。

2. 把自己本地生成的 **.config** 文件上传到根目录里

3. 修改 **diy-part1.sh** 把 kenzo 和 small 库加进去 

4. 去 Action 里 执行 **Build OpenWrt**

5. 不用执行 **update-checker**

   漫长的等待后，就可以去 Action 页面下载编译好的固件了。

   ![image-20220804161722115](assets/image-20220804161722115.png)

## 总结

Ubuntu VM 编译和 Github Action 库编译没有本质的区别，需要的准备工作都是 OpenWrt 和 luci 包的源码，自己需要包含的app列表，预加载的文件等。

不过 Github 有良好的网络环境，这是国内不具备的，所以优势还是很明显的。
